Script Name:
alertmsg_reset
Script Code:
--[[
    alertmsg_reset.lua
    If the "Alert Meldung Reset" switch is turned ON, 
    the text of the alert sensor (idx=55) is set to the value of the User Variable DEF_ALERTMSG and 
    the switch is turned OFF again.    
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180909
]]--

-- External modules:
local msgbox = require('msgbox')
 
-- Idx of the devices used
-- Switch Alert Meldung Reset
local IDX_ALERTMSG_RESET = 119

return {
    -- Check which device(s) have a state change
	on = {
		devices = {
			IDX_ALERTMSG_RESET
		}
	},
    -- Handle the switch if its state has changed to On
	execute = function(domoticz, device)
		domoticz.log('Device ' .. device.name .. ' was changed ' .. domoticz.devices(domoticz.variables('IDX_ALERTMSG').value).text, domoticz.LOG_INFO)
	    if (device.state == 'On') then
            -- only change if the current text differs from the default text
	        if (domoticz.devices(domoticz.variables('IDX_ALERTMSG').value).text ~= domoticz.variables('DEF_ALERTMSG').value) then
                local message = domoticz.variables('DEF_ALERTMSG').value
                msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_GREY, message)
                domoticz.log(message)
            end
	        device.switchOff()
		end
	end
}

**************************************************
Script Name:
astro_info
Script Code:
--[[
    astro_info.lua
    Display the sunrise and sunset time plus daylength in a virtual text sensor.
    Updated once a day.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20181001
]]--

local utils = require('utils')
-- local msgbox = require('msgbox')

-- Idx of the devices
local IDX_SUNRISESET = 121

return {
    -- active = true,
    on = {
        timer = {
            -- 'every minute'
	        'at 01:00'
        }
    },
    execute = function(domoticz, timer)

        local daylength = domoticz.time.sunsetInMinutes - domoticz.time.sunriseInMinutes
        local msg = utils.MinutesToClock(domoticz.time.sunriseInMinutes)..' - '..utils.MinutesToClock(domoticz.time.sunsetInMinutes)..' ('..utils.MinutesToClock(daylength)..')'
        domoticz.devices(IDX_SUNRISESET).updateText(msg)
        domoticz.log(msg)

    end
}



**************************************************
Script Name:
coffee_machine_monitor
Script Code:
--[[
    coffee_machine_monitor.lua
    Monitors the electric usage between 07:00-08:30.
    If > 1500 (Threshold) then the cofee machine is turned oh.
    The machine stays on for 2 hours, then switches off.
    Update the alert message with switch off time.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180926
]]--

-- Module msgbox: /home/pi/domoticz/scripts/dzVents/scripts
local msgbox = require('msgbox')

-- Idx of the devices
local IDX_STROMVERBRAUCH = 44
local TH_STROMVERBRAUCH = 1100

local MONITOR_START_END = 'at 07:00-09:00'

return {
	on = {
	    timer = {
    	    MONITOR_START_END
	    },
	},
	data = {
       notified = { initial = 0 }
    },
	execute = function(domoticz)

        -- Check if below threshold and notified flag set
        -- Action: reset notified flag
        if (domoticz.devices(IDX_STROMVERBRAUCH).WhActual < TH_STROMVERBRAUCH) and (domoticz.data.notified == 1) then
            domoticz.data.notified = 0
        end

        -- Check if above threshold and notified flag not set
        -- Action: set notified flag anf alert message
        if (domoticz.devices(IDX_STROMVERBRAUCH).WhActual > TH_STROMVERBRAUCH) and (domoticz.data.notified == 0) then
            -- set notified flag
            domoticz.data.notified = 1
            -- get the time on and log
    	    timeon = os.date("*t")
    	    message = ('Kaffee Machine an %02d:%02d'):format(timeon.hour, timeon.min)
            domoticz.log(message, domoticz.LOG_INFO)
            -- calculate the time off = timeon + 2 hours
            timeoff = os.date("*t", os.time() + 2*60*60)
            -- define message to notify the time coffee machine switches off
            message = ('Kaffee Machine aus %02d:%02d'):format(timeoff.hour, timeoff.min)
            -- update alert message
            msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_ORANGE, message)
            domoticz.log(message, domoticz.LOG_INFO)
        end

    end
}

**************************************************
Script Name:
days_to_go_update
Script Code:
--[[
    days_to_go_update.lua
    Update days-to-go once per day for virtual devices: idx=29,57,97
    For testing, add 'every minute' to the timer and check the log file.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20190213
]]--

-- External modules
local utils = require('utils')

-- Idx of the devices
local IDX_DAYSLANZAROTE = 142; 

-- Event
return {
    on = {
        timer = {
            'at 01:00'
            -- 'every minute'
        }       
    },
    execute = function(domoticz, timer)
        -- domoticz.log('Event triggerd by rule: ' .. timer.trigger)

		-- For each days-to-go device:
		-- calculate the days difference between target date and now, 
		-- define the text to display and update the device

		-- Lanzarote Urlaub days till
		domoticz.devices(IDX_DAYSLANZAROTE).updateText(tostring(utils.datediffnow2(12,3,2019)) .. ' T')

end
}

**************************************************
Script Name:
electric_usage_update
Script Code:
--[[
    electric_usage_update.lua
    Send, every 3 minutes, a HTTP Request (GET) to the Raspberry Pi running the volkszaehler.
    The volkszaehler resonse is a JSON string.
    Update the Powerconsumption device (44, VirtualSensors,Stromverbrauch,Usage,Electric,2205.58 Watt).

    Request Examples
    data last 5 minutes (ensure to replace the space by a +
    requesturl = 'http://vz-rpi-ip-address/middleware.php/data/958bce60-b342-11e8-b54f-bbec0573e1f4.json?from=5+minutes+ago&to=now'
    data now
    requesturl = 'http://vz-rpi-ip-address/middleware.php/data/958bce60-b342-11e8-b54f-bbec0573e1f4.json?from=now&to=now',

    Request Result JSON string
    {"version":"0.3","data":{"tuples":###,"uuid":"958bce60-b342-11e8-b54f-bbec0573e1f4","from":1536243168796,"to":1536243170351,"min":[1536243170351,926.0450147835],"max":[1536243170351,926.0450147835],"average":926.045,"consumption":0.4,"rows":2}}
    Obtain the powerconsumption from key data.average

    For testing, add 'every minute' to the timer and check the log file.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 201809111
]]--

-- External modules: /home/pi/domoticz/scripts/dzVents/scripts
local msgbox = require('msgbox')
 
-- The request url uses from=5 minutes ago to to=now
local requesturl = 'http://vz-rpi-ip-address/middleware.php/data/958bce60-b342-11e8-b54f-bbec0573e1f4.json?from=5+minutes+ago&to=now'

-- Idx of the devices
local IDX_POWERCONSUMPTION = 44

return {
    -- active = true,
	on = {
		timer = {
			'every 3 minutes'
			-- 'every minute'
		},
		httpResponses = {
            'electricusageData'
        }
	},
	execute = function(domoticz, item)
        -- if the timer is executed, then place http get request, which result is handled by the callback.
        if (item.isTimer) then
            domoticz.openURL({
                url = requesturl,
                method = 'GET',
                callback = 'electricusageData'
            })
		end
		-- callback handling the url get request response
        if (item.isHTTPResponse) then
            -- for tests log the data requested (json string)
			-- domoticz.log(item.data)

            if (item.ok) then -- statusCode == 2xx
                -- parse the json string to get the average from key data.average
                local powerconsumption = tonumber(item.json.data.average)

                -- update the powerconsumption device
                domoticz.devices(IDX_POWERCONSUMPTION).updateEnergy(math.floor(powerconsumption))

                domoticz.log('[INFO] Electric usage updated: ' .. powerconsumption .. ' ' .. tostring(item.statusCode), domoticz.LOG_INFO)
            end

            if not (item.ok) then -- statusCode != 2xx
                local message = '[ERROR] Electric usage: ' .. tostring(item.statusCode) .. ' ' .. msgbox.isnowdatetime(domoticz)
                msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_YELLOW, message)
                domoticz.log(message, domoticz.LOG_INFO)
            end
        end
	end
}


**************************************************
Script Name:
hue_wz_timer
Script Code:
--[[
    hue_wz_timer.lua
    Turn WZ Hue lamps on & off by given time: ON at sunset, OFF at 23:00.
    Update the alert message.
    IMPORTANT: Ensure the timer and the timer trigger are the same.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20181128
]]--

-- External modules
local utils = require('utils')
local msgbox = require('msgbox')

-- Idx of the devices
local IDX_HUE_WZABLAGE = 111
local IDX_HUE_WZTV = 112
local IDX_HUE_HAUSTUER = 110

-- Update alert message with alert level green.
local function setalertmsg(domoticz, state)
	local message= 'Hue Lampen ' .. state .. ' ' .. utils.isnowhhmm(domoticz)
    msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_GREEN, message)
end

local function hueswitchon(domoticz)
	domoticz.devices(IDX_HUE_WZABLAGE).switchOn()
    domoticz.devices(IDX_HUE_WZTV).switchOn()
    domoticz.devices(IDX_HUE_HAUSTUER).switchOn()
    setalertmsg(domoticz, 'an')
end

local function hueswitchoff(domoticz)
    domoticz.devices(IDX_HUE_WZABLAGE).switchOff()
    domoticz.devices(IDX_HUE_WZTV).switchOff()
    domoticz.devices(IDX_HUE_HAUSTUER).switchOff()
    setalertmsg(domoticz, 'aus')
end

return {
    active = true,
    on = {
        timer = {
            '60 minutes before sunset',
	        '30 minutes before sunset',
	        'at 23:00',
	        'at 07:00',
	        'at 08:00'
        }
    },
    execute = function(domoticz, timer)

        -- in the evening send message hue lights will be switched on
        if (timer.trigger == '60 minutes before sunset') then
            -- format date & time see www.lua.org/pil/22.1.html. X = time.
            local now=os.time()
            local nowplus30minutes = utils.converttimehhmm(os.date("%X",now+(30*60)))
        	local message= 'Hue Lampen gehen an ' .. nowplus30minutes
            msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_GREEN, message)
        end

        -- switch the hue lights on & off in the evening
        if (timer.trigger == '30 minutes before sunset') then hueswitchon(domoticz) end
        if (timer.trigger == 'at 23:00') then hueswitchoff(domoticz) end

        -- switch the hue lights on & off in the morning
        -- NOT USED
        -- if (timer.trigger == 'at 07:00') then hueswitchon(domoticz) end
        -- if (timer.trigger == 'at 08:00') then hueswitchoff(domoticz) end

    end
}

**************************************************
Script Name:
luftdruck_update
Script Code:
--[[
    luftdruck_update.lua
    If the a value of the BMP280 device (idx=115) has changed, 
    update the value of the Virtual Sensor Barometer named Luftdruck (idx=116)
    Use print(device.dump()) ONLY ONCE to get the properties.
    Project: atHome
    Interpreter: dzVents, Device
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180911
]]--

-- Idx of the devices
local IDX_BMP280 = 115;
local IDX_LUFTDRUCK = 116;

-- Event handling changes of the BMP280 device
return {
	on = {
		devices = {
			IDX_BMP280
		}
	},
	execute = function(domoticz, device)
        -- print(device.dump())

		-- domoticz.log('Device ' .. device.name .. ' changed ', domoticz.LOG_INFO)
		domoticz.log('Barometer: ' .. device.barometer .. '/' .. device.forecast .. '/' .. device.forecastString, domoticz.LOG_INFO)

        -- Round the pressure
		pressure = math.floor(device.barometer)

		-- Forecast from the BMP device to the Barometer device
		-- See source code RFXNames.cpp, BMP_Forecast_Desc
        -- Map the BMP_Forecase_Desc string to dzEvents Forecast value:
        -- domoticz.BARO_STABLE, BARO_SUNNY, BARO_CLOUDY, BARO_UNSTABLE, BARO_THUNDERSTORM

        forecast = -1
		if (device.forecastString == 'Stable') then forecast = domoticz.BARO_STABLE end
        if (device.forecastString == 'Sunny') then forecast = domoticz.BARO_SUNNY end
	    if (device.forecastString == 'Cloudy') then forecast = domoticz.BARO_CLOUDY end
	    if (device.forecastString == 'Unstable') then forecast = domoticz.BARO_UNSTABLE end
	    if (device.forecastString == 'Thunderstorm') then forecast = domoticz.BARO_THUNDERSTORM end
	    if (device.forecastString == 'Unknown') then forecast = domoticz.BARO_STABLE end
	    if (device.forecastString == 'Cloudy/Rain') then forecast = domoticz.BARO_CLOUDY end

        -- Update the virtual sensor Luftdruck
		domoticz.devices(IDX_LUFTDRUCK).updateBarometer(pressure, forecast)
	end
}
**************************************************
Script Name:
rpi_monitor
Script Code:
--[[
    rpi_monitor.lua
    Monitor the Raspberry Pi and notify, via alert message, in case threshold reached or exceeded.
    Project: atHome
    Interpreter: dzVents, Device
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180910
]]--

-- External modules
local msgbox = require('msgbox')
local utils = require('utils')
 
-- Idx of the devices
local IDX_RPI_MEMORYUSAGE = 1
local IDX_RPI_HDDUSAGE = 3
local IDX_RPI_TEMPERATURE = 4

-- Thresholds are set via user variables, i.e. TH_RPI_MEMORYUSAGE

-- Check if the device state exceeds threshold and update control message
local function checkthreshold(domoticz, device, threshold)
    if (tonumber(device.state) > threshold) then
        local message = device.name .. ' above threshold ' .. threshold .. ' (' .. device.state .. ') ' .. utils.isnowhhmm(domoticz)
        msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_RED, message)
    end
end

return {
	on = {
        -- Devices idx to monitor
		devices = {
			IDX_RPI_MEMORYUSAGE,
			IDX_RPI_HDDUSAGE,
			IDX_RPI_TEMPERATURE
		}
	},
	execute = function(domoticz, device)
        -- Log the change for testing
	    -- domoticz.log('RPi Monitor Device ' .. device.name .. ',' .. device.idx .. ' was changed:' .. device.state .. '/' .. device.rawData[1], domoticz.LOG_INFO)
	    
	    -- select the device
        
        -- RPi Memory Usage
	    if (device.idx == IDX_RPI_MEMORYUSAGE) then
            checkthreshold(domoticz, device, domoticz.variables('TH_RPI_MEMORYUSAGE').value)
		end    

        -- RPi HDD Usage
	    if (device.idx == IDX_RPI_HDDUSAGE) then
            checkthreshold(domoticz, device, domoticz.variables('TH_RPI_HDDUSAGE').value)
		end    

        -- RPi Temperature
	    if (device.idx == IDX_RPI_TEMPERATURE) then
            checkthreshold(domoticz, device, domoticz.variables('TH_RPI_TEMPERATURE').value)
		end    

    end
}

**************************************************
Script Name:
stock_monitor
Script Code:
--[[
    monitor_stocks.lua
    Monitor if a stock has reached its threshold and send out a notification.
    Project: atHome
    Interpreter: dzVents, Device
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20190215
]]--

-- External modules:
local utils = require('utils')
local msgbox = require('msgbox')

-- Stock RDS - idx device, idx uservariable threshold, idx uservariable thresholdnotified
local IDX_STOCK_RDS = 152
local IDX_TH_STOCK_RDS = 8
local IDX_TH_STOCK_RDS_NOTIFIED = 9

-- temp var for the threshold value
local thresholdvalue
-- flag to check if notified, to avoid notifying for every change above threshold
local thresholdnotified = 0
-- message
local message

return {
	on = {
		devices = {
			IDX_STOCK_RDS
		}
	},
	execute = function(domoticz, device)
 		domoticz.log('Device ' .. device.name .. ' was changed  to '.. device.state, domoticz.LOG_INFO)

        -- select the device to obtain the thresholdvalue
        if device.idx == IDX_STOCK_RDS then
            thresholdvalue = domoticz.variables(IDX_TH_STOCK_RDS).value
            thresholdnotified = domoticz.variables(IDX_TH_STOCK_RDS_NOTIFIED).value
 		    domoticz.log('Device ' .. device.name .. ': '.. tostring(thresholdvalue) .. ', ' .. tostring(thresholdnotified), domoticz.LOG_INFO)
        end;
        -- add more devices

        -- check if notified flag is set (> -1)
        if (thresholdnotified ~= -1) then
            
            -- reset the message
            message = ''

            -- check if the device value equals or geater threshold (user_variable)
            -- log and notify accordingly
    	    if (tonumber(device.state) >= thresholdvalue) then
                -- update alert message,only if notifiedflag = 0 to avoid duplication
                if thresholdnotified == 0 then
                    thresholdnotified = 1
                    message = device.name .. ' ' .. tonumber(device.state) .. ' reached threshold ' ..  tostring(thresholdvalue)
                    -- DEBUG domoticz.log(message, domoticz.LOG_INFO) 
                end
 	        end
            
            -- below threshold,then reset flag and set message
    	    if (tonumber(device.state) < thresholdvalue) then
    	        if thresholdnotified == 1 then
                    message = device.name .. ' ' .. tonumber(device.state) .. ' below threshold ' ..  tostring(thresholdvalue)
    	            thresholdnotified = 0
                    --  DEBUG domoticz.log(message, domoticz.LOG_INFO) 
        	    end
            end

            -- check if the message is empty
            if (message ~= '') then
                -- update the user variable
                domoticz.variables(IDX_TH_STOCK_RDS_NOTIFIED).set(thresholdnotified)
                -- write to log
                domoticz.log(message, domoticz.LOG_INFO) 
                -- set the alert message
                msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_ORANGE, message)
                -- and notification
                -- domoticz.notify(message)
            end
      
        end

	end
}
**************************************************
Script Name:
waste_calendar_update
Script Code:
--[[
    waste_calendar_update.lua
    Read a csv file with wastecalendar dates per device.
    Update the device text with the date if the date is within interval specified.
    The wastecalender file "wastecal.csv" is located in the dzVents scripts folder.
    Line entry csv file: idx,interval,date1,dateN.
    Project: atHome
    Interpreter: dzVents, Timer
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180930
]]--

-- External modules: /home/pi/domoticz/scripts/dzVents/scripts
local utils = require('utils')
local msgbox = require('msgbox')

-- threshold in days to notify
-- if the difference of the current day to a wastecalendarday equals threshold
-- then notify
local TH_WASTECAL = 1

-- Helpers
function string:split( inSplitPattern, outResults )
  if not outResults then
    outResults = { }
  end
  local theStart = 1
  local theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
  while theSplitStart do
    table.insert( outResults, string.sub( self, theStart, theSplitStart-1 ) )
    theStart = theSplitEnd + 1
    theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
  end
  table.insert( outResults, string.sub( self, theStart ) )
  return outResults
end

-- the wastecalendar file is updated once per year
local wastecalfile = '/home/pi/domoticz/scripts/dzVents/scripts/wastecal.csv'
local sep = ","

-- read the csv file
function readandupdate(domoticz)
    -- read the file line by line.
    -- each line contains an array with device[1], wasteinterval[2], dates[2...]
    for line in io.lines(wastecalfile) do
	    -- split the line by , and assign to a table
	    local wastetable = line:split(sep)
	    local idx = tonumber(wastetable[1])
	    local interval = tonumber(wastetable[2])
	    -- flag to check if a wastedate has been found
	    local datefound = 0
	    
	    -- check the dates, start at 3 because 1=idx, 2=interval and number of table entries
	    for i = 3, #wastetable do

            -- get the wastedate array entry
		    local wastedate = wastetable[i]
		    -- split the wastedate into an array with 3 entries day, month, year
		    local wastedatesplit = wastedate:split("-")
		    -- calculate the daysdiff between now and the wastedate
		    local daysdiff = utils.datediffnow(wastedatesplit[1], wastedatesplit[2], wastedatesplit[3])
		    -- 
		    local month = tonumber(wastedatesplit[2])

		    -- check if daysdiff within interval
		    -- if daysdiff >= 0 and daysdiff < interval then
		    if daysdiff >= 0 and datefound == 0 then
                datefound = 1
			    print (domoticz.devices(idx).name .. '(' .. idx .. ')=' .. wastedate .. ', days=' .. daysdiff .. ', interval=' .. interval)

			    -- update the device text with the new date
                domoticz.devices(idx).updateText(wastedate)
			
			    -- check number of days left compared to the threshold
			    -- i.e. if 1 day left, then notify using device name & text.
			    -- the device text contains the date
			    -- NOT USED = handled by the dzVents script waste_calendar_notifier
			    if daysdiff == TH_WASTECAL then
				    -- print ('Device ' .. idx .. ' notifying...')
                    message = '[ACHTUNG] ' .. domoticz.devices(idx).name .. ' ' .. domoticz.devices(idx).text
                    -- update alert message
                    -- msgbox.alertmsg(domoticz, domoticz.ALERTLEVEL_RED, message)
    	            domoticz.log(message, domoticz.LOG_INFO)
                    domoticz.notify(message)
    		    end 
		    end

	        -- check if for the last entry daysdiff less 0, then no new date available
	        -- this is used f.e. for hohenfelde as last wastedate is sep or oct
		    if i == #wastetable and daysdiff < 0 then
                datefound = 1
			    print (idx .. '=' .. wastedate .. ', days=' .. daysdiff .. ', interval=' .. interval .. ', KEIN TERMIN')

			    -- update the device text with the info that there is no date (yet) available
                domoticz.devices(idx).updateText('Kein neuer Termin')
		    end

        end

	    -- check if a wastedate has been found, if not then set Kein termin message
	    if datefound == 0 then
		    print (idx .. '=' .. 'KEIN TERMIN')
			-- update the device text with the info that there is no date (yet) available
            domoticz.devices(idx).updateText('Kein neuer Termin')
        end

        -- JUST SOME LEARNERS
	    -- print the content
	    -- for i = 1, #wastetable do
	    -- 	print( wastetable[i] )
    	-- end
	
	    -- print device idx and length of the csv string
	    -- print (wastetable[1] .. "Length:" .. #wastetable)

    end
end

return {
	on = {
        timer = {
            -- for tests use every minute
            -- 'every minute',
	        'at 00:30'
        }
    },
	execute = function(domoticz)
        readandupdate(domoticz)
	end
}

**************************************************
Script Name:
wind_update
Script Code:
--[[
    wind_update.lua
	If the a value of the device Windmesser (idx=28) changes, 
	update the value (Wind direction & speed) of 
	the Virtual Sensor Wind named Wind (ix=117)
    Use print(device.dump()) ONLY ONCE to get the properties.
    Project: atHome
    Interpreter: dzVents, Device
    See: athome.pdf
    Author: Robert W.B. Linn
    Version: 20180910
]]--

-- Idx of the devices
local IDX_WINDMESSER = 28;
local IDX_WIND = 117;

-- Event handling changes of the Windmesser device
return {
	on = {
		devices = {
			IDX_WINDMESSER
		}
	},
	execute = function(domoticz, device)
        -- print(device.dump())
		-- domoticz.log('Device ' .. device.name .. ' changed ', domoticz.LOG_INFO)

        bearing = device.direction
        direction = device.directionString
        speed = device.speed
        gust = device.gust
        temperature = device.temperature
        chill = device.chill

        -- Update the virtual sensor Luftdruck
		domoticz.devices(IDX_WIND).updateWind(bearing, direction, speed, gust, temperature, chill)
	end
}

**************************************************
