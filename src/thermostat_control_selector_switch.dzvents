-- thermostat_control_selector_switch
-- via selector switch, set the setpoint of the radiator thermostat HmIP-eTRV-2

-- Domoticz device idx
-- Thermostat selector
local IDX_THERMOSTAT_SELECTOR = 114;
-- Thermostat setpoint for the selected thermostat
local IDX_THERMOSTAT_SETPOINT = 115;

-- Raspmatic datapoint ids for the thermostats taken from statelist
-- <datapoint type="SET_POINT_TEMPERATURE" ise_id="1584" name="HmIP-RF.000A18A9A64DAC:1.SET_POINT_TEMPERATURE" operations="7" timestamp="1575709506" valueunit="Â°C" valuetype="4" value="20.000000"/>
-- The array is according to the thermostats defined in the selector switch [level]=ise_id SET_POINT_TEMPERATURE
-- Example: makelab = level 10,dusche = level 20
-- IMPORTANT: if the level order is changed in the device widget, the array must be changed as well!
local ID_THERMOSTAT_DATAPOINTS = {[10]=1584,[20]=3586,[30]=3418 ,[40]=3680,[50]=3478,[60]=3734,[70]=3532};
local datapointSelected

-- url of the raspmatic webserver to set the new setpoint
local URL_RASPMATIC_STATECHANGE = 'http://ccu-ip/config/xmlapi/statechange.cgi?ise_id=';
local URL_RASPMATIC_STATE = 'http://ccu-ip/config/xmlapi/state.cgi?datapoint_id=';

-- callback of the url request - must be unique across all dzevents - use prefix res + script name
local RES_RASPMATIC_SETSETPOINT = 'res_raspmatic_setsetpoint';
local RES_RASPMATIC_GETSETPOINT = 'res_raspmatic_getsetpoint';
-- http://ccu-ip/addons/xmlapi/state.cgi?datapoint_id=1584
-- <state><datapoint ise_id="1584" value="5.000000"/></state>

-- helper to round a number to n decimals
local DECIMALS = 1;

function round(number, decimals)
    local power = 10^decimals
    return math.floor(number * power) / power
end

return {
	on = {
		devices = {
			IDX_THERMOSTAT_SELECTOR, IDX_THERMOSTAT_SETPOINT
		},
		httpResponses = {
			RES_RASPMATIC_SETSETPOINT,RES_RASPMATIC_GETSETPOINT,
		}
	},
	data = {
            updateraspmatic = { initial = 1 }   -- flag to request update setpoint thermostat in raspmatic
    },
	execute = function(domoticz, item)

        -- check if the item is the device
		if (item.isDevice) then

            -- Get the setpoint datapoint from the thermostat selector
            datapointSelected = ID_THERMOSTAT_DATAPOINTS[domoticz.devices(IDX_THERMOSTAT_SELECTOR).level];

            -- The thermostat selector has changed
            -- Get actual setpoint for this device via http xml-api request - do not update raspmatic
            if (item.idx == IDX_THERMOSTAT_SELECTOR) then
                domoticz.data.updateraspmatic = 0;
                domoticz.log(string.format('SELECTOR CHG updateraspmatic: %d', domoticz.data.updateraspmatic), domoticz.LOG_INFO);
 		        local urlrm = string.format("%s%d", URL_RASPMATIC_STATE, datapointSelected);
    	        domoticz.log(string.format('SELECTOR GET setpoint: %s',urlrm), domoticz.LOG_INFO);
	    	    domoticz.openURL({url = urlrm, method = 'POST', callback = RES_RASPMATIC_GETSETPOINT});
            end

            -- The setpoint has changed
            -- Check if update raspmatic required
            if (item.idx == IDX_THERMOSTAT_SETPOINT) then
                domoticz.log(string.format('SETPOINT CHG updateraspmatic: %d', domoticz.data.updateraspmatic), domoticz.LOG_INFO);

                if (domoticz.data.updateraspmatic == 1) then
		            local newsetpoint = round(item.setPoint,1);
	                local urlrm = string.format("%s%d&new_value=%.2f", URL_RASPMATIC_STATECHANGE, datapointSelected, newsetpoint);
	                domoticz.log(string.format('SETPOINT SET setpoint:%.2f (%s)',newsetpoint, urlrm), domoticz.LOG_INFO);
    	            domoticz.openURL({url = urlrm, method = 'POST', callback = RES_RASPMATIC_SETSETPOINT});
                end

                if (domoticz.data.updateraspmatic == 0) then
                    domoticz.data.updateraspmatic = 1;
                    domoticz.log(string.format('SETPOINT RESET updateraspmatic: %d', domoticz.data.updateraspmatic), domoticz.LOG_INFO);
    	        end

            end

    	end

        -- check if the item is a httpresponse from the openurl callback
		if (item.isHTTPResponse) then
            -- the full http xml response:
            domoticz.log(item.callback .. "=" .. item.data);
		    
		    if (item.statusCode == 200) then

                -- Get the setpoint of the selected thermostat
                -- DO NOT TRIGGER AN RASPMATIC UPDATE
                if (item.callback == RES_RASPMATIC_GETSETPOINT) then
	    	        -- parse the response using XPath=select the attribute value of the changed element (this is XPath syntax)
		            -- <state><datapoint ise_id="1584" value="5.000000"/></state>
		            datapointSelected = ID_THERMOSTAT_DATAPOINTS[domoticz.devices(IDX_THERMOSTAT_SELECTOR).level];
                    local setpoint = domoticz_applyXPath(item.data,'//datapoint[@ise_id="' .. datapointSelected .. '"]/@value');
                    setpoint = round(setpoint,2);
                    -- setpoint = string.gsub(tostring(setpoint), ".0", ".00");
                    domoticz.log('CCU Response GET Setpoint: ' .. setpoint);

                    -- This will trigger device change but should not update raspmatic
                    -- NOTE: strange behaviour using updateSetPoint function - the device update is triggered twice but 
                    -- the widget setpointvalue spinner is not changed but the setpoint temperature widget topright is changed
                    -- domoticz.devices(IDX_THERMOSTAT_SETPOINT).updateSetPoint(setpoint);
                    
                    -- WORKAROUND with open url running ok
                    local urldom = string.format("http://domoicz-ip:8080/json.htm?type=command&param=setsetpoint&idx=%d&setpoint=%.2f",IDX_THERMOSTAT_SETPOINT,setpoint);
                    domoticz.openURL({url = urldom, method = 'POST'});
                    domoticz.log('DOMOTICZ API SET Setpoint: ' .. urldom);
                    -- domoticz.openURL({url = urldom, method = 'POST', callback = RES_RASPMATIC_SETSETPOINT});
                    
                    -- NOT working: error message dzvents local network not supported - no idea what this means
                    -- domoticz.devices(IDX_THERMOSTAT_SETPOINT).setValues(0,setpoint);
                end
            
                if (item.callback == RES_RASPMATIC_SETSETPOINT) then
                    -- A setpoint change has been requested
	    	        -- parse the response using XPath=select the attribute value of the changed element (this is XPath syntax)
    	            -- <changed id="1584" new_value="18"/>
                    datapointSelected = ID_THERMOSTAT_DATAPOINTS[domoticz.devices(IDX_THERMOSTAT_SELECTOR).level];
                    domoticz.log('CCU Response SET Setpoint: ' .. domoticz_applyXPath(item.data,'//changed[@id="' .. datapointSelected .. '"]/@new_value'))
                end

		    else
				domoticz.log('[ERROR] handling HTTP request:' .. item.statusText, domoticz.LOG_ERROR)
    		end

        end
        
    end
}