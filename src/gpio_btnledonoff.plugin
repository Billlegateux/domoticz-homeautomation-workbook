#!/usr/bin/python3
# -*- coding: utf-8 -*-
# domoticz-home-automation-workbook - explore RPi.GPIO
# WARNING: ensure the plugin key is unique across all plugins.
# author: rwbl
"""
<plugin key="gpiobtnledonoff" name="RPi.GPIO Push-Button LED OnOff" author="rwbl" version="0.5.0" wikilink="" externallink="">
    <description>
        <h2>RPi.GPIO Push-Button LED OnOff</h2>
        Explore the Raspberry Pi RPi.GPIO library.<br/> This plugin
        <ul style="list-style-type:square">
            <li>explores how to use the GPIO input (including callback handling) and output.</li>
            <li>is a base template for exploring further plugin solutions.</li>
        </ul>
        <h3>Features</h3>
        <ul style="list-style-type:square">
            <li>Components: LED (output) connected to GPIO18 (default), Push-Button (input) connected to GPIO23 (default).</li>
            <li>Creates the GPIO pins and set the GPIO numbering mode to BCM.</li>
            <li>By pressing the push-button, the LED state changes to ON and a Domoticz Text Device gets updated.</li>
            <li>By releasing the push-button, the LED state changes to OFF and a Domoticz Text Device gets updated.</li>
        </ul>
        <h3>Devices</h3>
        <ul style="list-style-type:square">
            <li>GPIO Status - Text device logging the LED state change.</li>
        </ul>
        <h3>Configuration</h3>
        Caution: Make sure the GPIO pin numbers are not used by other applications. The pin numbers use BCM format, i.e. GPIOnn (checkout for the board used).<br/>
        <ul style="list-style-type:square">
            <li>LED GPIO Pin Number (default: 18)</li>
            <li>Button GPIO Pin Number (default: 23)</li>
        </ul>
    </description>
    <params>
        <param field="Mode1" label="LED GPIO" width="75px" required="true" default="18"/>
        <param field="Mode2" label="Button GPIO" width="75px" required="true" default="23"/>
        <param field="Mode6" label="Debug" width="75px">
            <options>
                <option label="True" value="Debug" default="true"/>
                <option label="False" value="Normal"/>
            </options>
        </param>
     </params>
</plugin>
"""
import Domoticz
import os
import datetime
import RPi.GPIO as GPIO

# Set the plugin version
PLUGINVERSION = "v0.5.0"
PLUGINSHORTDESCRIPTON = "RPi.GPIO Push-Button LED OnOff"

# Units for the devices used
UNITGPIOSTATUS = 1  # text device

class BasePlugin:

    def __init__(self):
        # Define the GPIO Pins. Will be assigned from the parameters mode1 and mode2
        self.ledpin = 0
        self.buttonpin = 0
        return

    def onStart(self):
        Domoticz.Debug(PLUGINSHORTDESCRIPTON + " " + PLUGINVERSION)
        Domoticz.Debug("onStart called")
        Domoticz.Debug("Debug Mode:" + Parameters["Mode6"])

        #Check debug mode
        if Parameters["Mode6"] == "Debug":
            self.debug = True
            Domoticz.Debugging(1)
            dump_config_to_log()

        #Setting up GPIO, i.e. get the pin numbers, set mode BCM, warnings off, set the pin mode and events
        self.ledpin = int(Parameters["Mode1"])
        self.buttonpin = int(Parameters["Mode2"])
        # Domoticz.Debug("Setting up GPIO:LED=" + Parameters["Mode1"] + ", Button=" + Parameters["Mode2"])
        Domoticz.Debug("Setting up GPIO:LED=" + str(self.ledpin) + ", Button=" + str(self.buttonpin))
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        try:
            GPIO.setup(self.ledpin, GPIO.OUT)
            GPIO.setup(self.buttonpin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
            # Add the event handling self object.
            # Ensure onButtonCallback is in the same class and has self, channel as signature
            GPIO.add_event_detect(self.buttonpin,GPIO.BOTH,callback=self.onButtonCallback)
            GPIO.output(self.ledpin,GPIO.LOW)
            Domoticz.Debug("Setting up GPIO: Done")
        except:
            Domoticz.Error("Error setting up GPIO pins.")
            
        #Create device if needed
        # Domoticz.Debug("Devices:" + str(len(Devices)) )
        if (len(Devices) == 0):
            Domoticz.Debug("Creating device(s)")
            Domoticz.Device(Name="GPIO Status", Unit=UNITGPIOSTATUS, TypeName="Text", Used=1).Create()
            Domoticz.Debug("Device created: "+Devices[UNITGPIOSTATUS].Name)

    def onStop(self):
        Domoticz.Debug("onStop called: Cleaning up GPIO (IMPORTANT)")
        GPIO.cleanup()

    def onConnect(self, Connection, Status, Description):
        Domoticz.Debug("onConnect called")

    def onMessage(self, Connection, Data):
        Domoticz.Debug("onMessage called")

    def onCommand(self, Unit, Command, Level, Hue):
        Domoticz.Debug("onCommand called for Unit " + str(Unit) + ": Parameter '" + str(Command) + "', Level: " + str(Level))

    def onNotification(self, Name, Subject, Text, Status, Priority, Sound, ImageFile):
        Domoticz.Debug("Notification: " + Name + "," + Subject + "," + Text + "," + Status + "," + str(Priority) + "," + Sound + "," + ImageFile)

    def onDeviceModified(self, Unit):
        Domoticz.Debug("onDeviceModified called for Unit " + str(Unit))

    def onDisconnect(self, Connection):
        Domoticz.Debug("onDisconnect called")

    def onHeartbeat(self):
        Domoticz.Debug("onHeartbeat called")

    """
    Handle button changes. Button pressed = LED on, relesaed = LED off.
    This function must be in the same class as onStart because it uses the self object to access the pins.
    """
    def onButtonCallback(self, channel):
        Domoticz.Debug("onButtonCallback called")
        Domoticz.Debug("Pins:" + str(self.ledpin) + "," + str(self.buttonpin))
        state = "UNKNOWN"
        if GPIO.input(self.buttonpin) == GPIO.HIGH:
            GPIO.output(self.ledpin,GPIO.HIGH)
            state = "ON"
        if GPIO.input(self.buttonpin) == GPIO.LOW:
            GPIO.output(self.ledpin,GPIO.LOW)
            state = "OFF"
        Domoticz.Debug("Button was pressed. LED changed: {}".format(state))
        isnow = datetime.datetime.now().strftime("%Y%m%d %X")
        msg = "LED turned {} @ {}.".format(state, isnow)
        Devices[UNITGPIOSTATUS].Update(nValue=0, sValue=msg)
        Domoticz.Log(msg)
        Domoticz.Debug("onButtonCallback done")

global _plugin
_plugin = BasePlugin()

def onStart():
    global _plugin
    _plugin.onStart()

def onStop():
    global _plugin
    _plugin.onStop()

def onConnect(Connection, Status, Description):
    global _plugin
    _plugin.onConnect(Connection, Status, Description)

def onMessage(Connection, Data):
    global _plugin
    _plugin.onMessage(Connection, Data)

def onCommand(Unit, Command, Level, Hue):
    global _plugin
    _plugin.onCommand(Unit, Command, Level, Hue)

def onNotification(Name, Subject, Text, Status, Priority, Sound, ImageFile):
    global _plugin
    _plugin.onNotification(Name, Subject, Text, Status, Priority, Sound, ImageFile)

def onDeviceModified(Unit):
    global _plugin
    _plugin.onDeviceModified(Unit)

def onDisconnect(Connection):
    global _plugin
    _plugin.onDisconnect(Connection)

def onHeartbeat():
    global _plugin
    _plugin.onHeartbeat()

# Generic helper functions
"""
Dump the config parameters of the plugin to the Domoticz log.
"""
def dump_config_to_log():
    for x in Parameters:
        if Parameters[x] != "":
            Domoticz.Log( "'" + x + "':'" + str(Parameters[x]) + "'")
    Domoticz.Debug("Device count: " + str(len(Devices)))
    for x in Devices:
        Domoticz.Log("Device:           " + str(x) + " - " + str(Devices[x]))
        Domoticz.Log("Device ID:       '" + str(Devices[x].ID) + "'")
        Domoticz.Log("Device Name:     '" + Devices[x].Name + "'")
        Domoticz.Log("Device nValue:    " + str(Devices[x].nValue))
        Domoticz.Log("Device sValue:   '" + Devices[x].sValue + "'")
        Domoticz.Log("Device LastLevel: " + str(Devices[x].LastLevel))
    return
