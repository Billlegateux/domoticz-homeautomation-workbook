[
    {
        "id": "f40a6b94.886e08",
        "type": "comment",
        "z": "323f3991.2ed226",
        "name": "MQTT Logger",
        "info": "Log Domoticz MQTT messages.\nDefine the server in the mqtt-broker node.\nThe topic is \"domoticz/out\".",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "1b503e74.e018b2",
        "type": "ui_template",
        "z": "323f3991.2ed226",
        "group": "9bf4ac7c.1fa5d",
        "name": "MQTT Log",
        "order": 1,
        "width": "12",
        "height": "5",
        "format": "<div>\n<ul>\n <li ng-repeat=\"item in msg.payload\">\n     {{item.payload}}\n     <!-- <font size=1.2em>{{item.payload}}</font> -->\n </li>\n</ul>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1050,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2d7a71a9.9ac4be",
        "type": "function",
        "z": "323f3991.2ed226",
        "name": "Add Msg to flow.log",
        "func": "// Add the message to the flow.log array holding N entries\nvar maxentries = 3;\n\n// Debug\nnode.warn(\"Payload Idx=\" + msg.payload.idx + \", UseFilter=\" + flow.get('usefilter') + \", IdxFilter=\" + flow.get('idxfilter'));\n\n// Flag to add the msg to the log depending filter\nvar addtolog = 0;\n\n// Check if to use a filter\nif (flow.get('usefilter') == 1) {\n    // Get the filter\n    idxfilter = flow.get(\"idxfilter\");\n    // Split comma sparated filter\n    idxarray = idxfilter.split(\",\");\n    node.warn(idxarray.length + \"=\" +idxarray[0]+\"|\"+idxarray[1]);\n    // Check if the filter idx matches the payload idx\n    idxarray.forEach(function(item) {\n        if (item == msg.payload.idx) {\n            addtolog = 1;\n            console.log(item);\n            node.warn(\"ADDED IDX=\" +item);\n        }\n   });\n} else {\n    // No filter,  always add to log\n    addtolog = 1;\n} \n\n// Add the msg to the log\nif (addtolog == 1) {\n    // Init the log entries if not exist\n    var log = flow.get('log')|| [];\n    var hold = flow.get('hold');\n\n    lastmsg = msg;\n\n    if (!hold) {\n        log.push(lastmsg);\n        if (log.length > maxentries){\n            log.shift();\n            log.length = maxentries;\n        } \n\n        // store the value back\n        flow.set('log',log);\n\n        // set as payload\n        msg = {};\n        msg.payload = log;\n        return [msg,lastmsg];\n    }\n    \n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "1b503e74.e018b2"
            ],
            [
                "574d3e60.e92d6"
            ]
        ]
    },
    {
        "id": "60c9f677.988c58",
        "type": "mqtt in",
        "z": "323f3991.2ed226",
        "name": "MQTT",
        "topic": "domoticz/out",
        "qos": "1",
        "datatype": "auto",
        "broker": "959c9c83.8caad",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "377a33c6.e01d2c"
            ]
        ]
    },
    {
        "id": "377a33c6.e01d2c",
        "type": "json",
        "z": "323f3991.2ed226",
        "name": "Convert to JSON Object",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "2d7a71a9.9ac4be"
            ]
        ]
    },
    {
        "id": "ae478464.8900f8",
        "type": "change",
        "z": "323f3991.2ed226",
        "name": "Set flow.idxfilter",
        "rules": [
            {
                "t": "set",
                "p": "idxfilter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c79b3d6d.e5e7f",
        "type": "inject",
        "z": "323f3991.2ed226",
        "name": "Inject Idx Filter",
        "topic": "",
        "payload": "115,",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 400,
        "wires": [
            [
                "f1242dc5.d0608"
            ]
        ]
    },
    {
        "id": "f1242dc5.d0608",
        "type": "ui_text_input",
        "z": "323f3991.2ed226",
        "name": "Input Idx Filter",
        "label": "Idx Filter (separate by comma)",
        "tooltip": "",
        "group": "59281d20.483214",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "x": 340,
        "y": 400,
        "wires": [
            [
                "ae478464.8900f8"
            ]
        ]
    },
    {
        "id": "e4f410dc.27c1e",
        "type": "inject",
        "z": "323f3991.2ed226",
        "name": "Inject Empty Log",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "b4650080.589d8"
            ]
        ]
    },
    {
        "id": "b4650080.589d8",
        "type": "change",
        "z": "323f3991.2ed226",
        "name": "Set flow.log",
        "rules": [
            {
                "t": "set",
                "p": "log",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "42d13167.cca31",
        "type": "ui_button",
        "z": "323f3991.2ed226",
        "name": "Button Clear Log",
        "group": "59281d20.483214",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Clear Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "7866104f.8cf34"
            ]
        ]
    },
    {
        "id": "7866104f.8cf34",
        "type": "function",
        "z": "323f3991.2ed226",
        "name": "Clear flow.log",
        "func": "flow.set('log','');\n\nmsg.payload = 'Log cleared. Waiting new ...'\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "2d7a71a9.9ac4be"
            ]
        ]
    },
    {
        "id": "32ff24ff.f4e40c",
        "type": "ui_switch",
        "z": "323f3991.2ed226",
        "name": "Switch Set Hold Logging",
        "label": "Hold Logging",
        "tooltip": "",
        "group": "59281d20.483214",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 370,
        "y": 260,
        "wires": [
            [
                "1da22b41.b6b315"
            ]
        ]
    },
    {
        "id": "1da22b41.b6b315",
        "type": "change",
        "z": "323f3991.2ed226",
        "name": "Set Flow Hold State",
        "rules": [
            {
                "t": "set",
                "p": "hold",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "574d3e60.e92d6",
        "type": "ui_template",
        "z": "323f3991.2ed226",
        "group": "9bf4ac7c.1fa5d",
        "name": "Last Entry",
        "order": 5,
        "width": "12",
        "height": "3",
        "format": "<b>Last Entry (Idx:{{msg.payload.idx}}, Name:{{msg.payload.name}})</b><br/>\n{{msg.payload}}\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1040,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "36eb42d5.0d8e5e",
        "type": "inject",
        "z": "323f3991.2ed226",
        "name": "Inject Hold False",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "32ff24ff.f4e40c"
            ]
        ]
    },
    {
        "id": "1f176940.f61197",
        "type": "ui_switch",
        "z": "323f3991.2ed226",
        "name": "Switch Use Filter",
        "label": "Use Filter",
        "tooltip": "",
        "group": "59281d20.483214",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "x": 350,
        "y": 440,
        "wires": [
            [
                "856721ae.68cfe"
            ]
        ]
    },
    {
        "id": "135f765d.08d63a",
        "type": "inject",
        "z": "323f3991.2ed226",
        "name": "Inject Filter",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "1f176940.f61197"
            ]
        ]
    },
    {
        "id": "856721ae.68cfe",
        "type": "change",
        "z": "323f3991.2ed226",
        "name": "Set flow.usefilter",
        "rules": [
            {
                "t": "set",
                "p": "usefilter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "be35748.f434b88",
        "type": "comment",
        "z": "323f3991.2ed226",
        "name": "Settings",
        "info": "",
        "x": 100,
        "y": 180,
        "wires": []
    },
    {
        "id": "7a6ec219.be0acc",
        "type": "comment",
        "z": "323f3991.2ed226",
        "name": "Log",
        "info": "",
        "x": 90,
        "y": 80,
        "wires": []
    },
    {
        "id": "9bf4ac7c.1fa5d",
        "type": "ui_group",
        "z": "",
        "name": "Log",
        "tab": "e6933897.f013a8",
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "959c9c83.8caad",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT DoPro",
        "broker": "IP-ADDRESS",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "59281d20.483214",
        "type": "ui_group",
        "z": "",
        "name": "Settings",
        "tab": "e6933897.f013a8",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e6933897.f013a8",
        "type": "ui_tab",
        "z": "",
        "name": "MQTT Logger",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]