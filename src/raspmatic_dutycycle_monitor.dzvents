--[[
    raspmatic_dutycycle_monitor.dzvents
    Perform checks on the RaspberryMatic systemvariable "DutyCycle".
    The threshold (in pct) to send alert message and logerror is set by uservariable TH_RASPBERRYMATIC_DUTYCYCLE.
    20201019 rwbl
]]--

-- url http xml-api request system variable. The ise_id is set in the function openURL
local URL_RASPMATIC = 'http://192.168.1.225/addons/xmlapi/sysvar.cgi?ise_id=';

-- define the unique (across all dzVents) callback
local RES_RASPMATIC = "RES_RASPMATIC_DUTYCYCLE_MONITOR";

-- set the datapoint ise_id of the "DutyCycle" with ise_id 1390
local DATAPOINT_ISE_ID = 1390;

-- domoticz dutycycle device
local IDX_RASPMATIC_DUTYCYCLE = 301;

-- set the alert message if dutycycle value is above threshold as set by uservariable TH_RASPBERRYMATIC_DUTYCYCLE
-- (idx,name,type,value): 23, TH_RASPBERRYMATIC_DUTYCYCLE, Integer, 10
local IDX_UV_TH_RASPBERRYMATIC_DUTYCYCLE = 23

-- Timer interval 'every 10 minutes' - for tests use: 'every minute'
local TIMER_RULE = 'every 10 minutes' 

-- Helpers
function round(number, decimals)
    local power = 10^decimals
    return math.floor(number * power) / power
end

return {
	on = {
	    timer = { 
	        TIMER_RULE
        },
		httpResponses = { 
		    RES_RASPMATIC, 
	    }
	},
	execute = function(domoticz, item)
        -- check if the item is a device, then request information
		if (item.isTimer) then
		    domoticz.openURL({url = URL_RASPMATIC .. DATAPOINT_ISE_ID, method = 'GET', callback = RES_RASPMATIC,})
		end

        -- check if the item is a httpresponse from the openurl callback
		if (item.isHTTPResponse) then
			if (item.statusCode == 200) then
                -- domoticz.log(item.data);
                
                -- Select the callback - in this case there is only one (but for any next developments here might be more)
                if (item.callback == RES_RASPMATIC) then
                    -- get the key value from the http response
                    -- <systemVariable value_name_1="" value_name_0="" timestamp="1587970920" subtype="0" type="4" unit="%" max="100" min="-1" ise_id="1390" value_text="" value_list="" value="3.000000" variable="3.000000" name="DutyCycle"/>
                    local value = tonumber(domoticz_applyXPath(item.data,'//systemVariable[@ise_id="'..DATAPOINT_ISE_ID..'"]/@value'))
                    domoticz.devices(IDX_RASPMATIC_DUTYCYCLE).updatePercentage(value);
                    -- local value = tonumber(domoticz_applyXPath(item.data, DATAPOINT2543.xpath))

                    -- Get the threshold
                    local threshold = domoticz.variables(IDX_UV_TH_RASPBERRYMATIC_DUTYCYCLE).value
                    local message = ""

                    -- Check the actual value against the threshold
                    if value > threshold then
                        message = string.format("RaspMatic Duty-Cycle %.0f%%, Limit %d%% (%s)", 
                            value, threshold, 
                            domoticz.helpers.isnowshort(domoticz));
                        domoticz.helpers.alertmsg(domoticz, domoticz.ALERTLEVEL_RED, message)
                        domoticz.log(message, domoticz.LOG_ERROR) 
                    else
                        message = string.format("RaspMatic Duty-Cycle %.0f%%, Limit %d%% (%s)", 
                            value, threshold, 
                            domoticz.helpers.isnowshort(domoticz));
                        domoticz.log(message, domoticz.LOG_INFO) 
                    end
                end
			else
				domoticz.log('[ERROR] Request:' .. item.statusText, domoticz.LOG_ERROR)
			end
		end

    end
}
