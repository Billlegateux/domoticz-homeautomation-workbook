[
    {
        "id": "38ce1005.b1c85",
        "type": "tab",
        "label": "RaspMatic Single Devices",
        "disabled": false,
        "info": ""
    },
    {
        "id": "14b60e4.7f0a3f2",
        "type": "xml",
        "z": "38ce1005.b1c85",
        "name": "Convert XML JavaScript Object",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 950,
        "y": 160,
        "wires": [
            [
                "551deea1.f74e6"
            ]
        ]
    },
    {
        "id": "551deea1.f74e6",
        "type": "function",
        "z": "38ce1005.b1c85",
        "name": "Get Devices and Datapoints",
        "func": "/*\n* return a json array with devices used for the ui_dropdown\n* set flow context \"datapoints\" for the ui_template to display the datapoints for the selected device id\nNotes: \n* Example device entry: deviceobj[\"Briefkasten Status\"]=2530;\n* Example datapoint entry: device:\"2530\",datapoint:{\"id\":\"2532\",\"type\":\"CONFIG_PENDING\",\"value\":\"false\",\"name\":\"HmIP-RF.0000DA498D5859:0.CONFIG_PENDING\"}\n* the second array below is not used as replaced by the flow context \"datapoints\" - but is kept in case any enhancements planned\n*/\n\nconst DEBUG = false;\n// get the statelist from xml into json format\nstatelist = msg.payload.stateList;\n// Get the statelist with the devices\nif (DEBUG) node.warn(statelist);\n// Get the devices array\ndevices = statelist.device\nif (DEBUG) node.warn(devices.length);\narrdevices = [];\narrdatapoints = [];\n// Loop over the devices\ndevices.forEach(function(device) {\n    // node.warn(device);\n    devicename = device.$.name;\n    deviceise_id = device.$.ise_id;\n    deviceobj = {}\n    deviceobj[devicename]=deviceise_id;\n    arrdevices.push(deviceobj);\n    //\n    channels = device.channel;\n    if (DEBUG) node.warn(\"Channel Name:\" + device.$.name);\n    channels.forEach(function(channel){\n        channeldatapoints = channel.datapoint;\n        if (channeldatapoints !== undefined) {\n            // node.warn(\"Channel datapoints: \" + channeldatapoints);\n            channeldatapoints.forEach(function(datapoint){\n                //node.warn(datapoint);\n                obj = datapoint.$;\n                if (obj !== undefined) {\n                    if (DEBUG) node.warn(devicename + \": datapoints=\" + obj.ise_id + \":\" + obj.type + \"=\" + obj.value);\n                    dpobj = {\n                        \"device\":deviceise_id,\n                        \"datapoint\": {\n                            \"id\":obj.ise_id,\"type\":obj.type,\"value\":obj.value,\"name\":obj.name\n                        }\n                    };\n                    arrdatapoints.push(dpobj);\n                    // dpstring = \"device:\"+devicename+\", dp:\"+obj.ise_id+\",type:\"+obj.type+\",value:\"+obj.value;\n                    // arrdatapoints.push(dpstring);\n                }\n            });\n        }\n    });\n});\nif (DEBUG) node.warn(arrdatapoints.length);\nflow.set(\"datapoints\",arrdatapoints);\nif (DEBUG) node.warn(flow.get(\"datapoints\"));\n\nmsgdevices = {};\nmsgdevices.options = arrdevices;\nif (DEBUG) node.warn(msgdevices.options)\n\nmsgdatapoints = {};\nmsgdatapoints.payload = arrdatapoints;\n\nreturn [msgdevices,msgdatapoints];\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 160,
        "wires": [
            [
                "d0a8bff.d1d634"
            ]
        ]
    },
    {
        "id": "a4cc9eba.9e127",
        "type": "http request",
        "z": "38ce1005.b1c85",
        "name": "Send HTTP XML-API Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "9be59a48.5d6ab8"
            ]
        ]
    },
    {
        "id": "9be59a48.5d6ab8",
        "type": "function",
        "z": "38ce1005.b1c85",
        "name": "Correct Datapoints",
        "func": "// Correct strings in the datapoints XML response.\nvar statelist = msg.payload;\n\n// \"\"\"\" to be replaced to \"\"\nstatelist.replace(\"\\\"\\\"\",\"\");\n// Assign the corrected statelist\nmsg.payload = statelist;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 160,
        "wires": [
            [
                "14b60e4.7f0a3f2"
            ]
        ]
    },
    {
        "id": "576f030c.30fedc",
        "type": "inject",
        "z": "38ce1005.b1c85",
        "name": "Request Statelist",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "ef763c4.59336c"
            ]
        ]
    },
    {
        "id": "ef763c4.59336c",
        "type": "function",
        "z": "38ce1005.b1c85",
        "name": "Set HTTP XML-API Request",
        "func": "\nmsg.url = \"http://\" + flow.get(\"ccuip\") + \"/config/xmlapi/statelist.cgi\";\nnode.warn(msg.url);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "a4cc9eba.9e127"
            ]
        ]
    },
    {
        "id": "84eeccc9.0503f",
        "type": "change",
        "z": "38ce1005.b1c85",
        "name": "Set CCU IP",
        "rules": [
            {
                "t": "set",
                "p": "ccuip",
                "pt": "flow",
                "to": "CCU-IP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "1b35048a.a235ab"
            ]
        ]
    },
    {
        "id": "941e9456.15d618",
        "type": "debug",
        "z": "38ce1005.b1c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1010,
        "y": 220,
        "wires": []
    },
    {
        "id": "68dc0fbe.27ba1",
        "type": "inject",
        "z": "38ce1005.b1c85",
        "name": "Init",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 110,
        "y": 80,
        "wires": [
            [
                "84eeccc9.0503f"
            ]
        ]
    },
    {
        "id": "54079878.c25008",
        "type": "comment",
        "z": "38ce1005.b1c85",
        "name": "RaspMatic Single Device Datapoint to Domoticz Device",
        "info": "\nGet all HomeMatic (HmIP) datapoints from the CCU running on the RaspMatic system.\n\nSelect datapoint(s) and update the assigned Domoticz device(s).\n\nExample:\nHmIP Device:\nThermostat HmIP-eTRV-2\nDatapoint:\ndatapoint ise_id=\"1567\" name=\"HmIP-RF.000A18A9A64DAC:1.ACTUAL_TEMPERATURE\" operations=\"5\" timestamp=\"1583752872\" valueunit=\"\" valuetype=\"4\" value=\"22.800000\" type=\"ACTUAL_TEMPERATURE\"\n\nDomoticz Device:\nIDX=113,Hardware=VirtualDevices,Name=MakeLab Temperature,Type=Temp,SubType=LaCrosse TX3\n\nHTTP Reponse:\n{\t\"status\" : \"OK\",\t\"title\" : \"Update Device\"}\n",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "815e0dcd.277fc",
        "type": "function",
        "z": "38ce1005.b1c85",
        "name": "Get Datapoint Value",
        "func": "/*\nThe purpose of this function is to\n* get the value of a selected using the datapoint id (ise_id)\n* return the value\n*/\nconst DEBUG = false;\n// get the datapoint id, i.e. 1657 for the selected channel\nvar datapointid = msg.payload;\nif (DEBUG) node.warn(\"Selected: \" + datapointid);\n\nif (datapointid === null) return \"\";\n\n// get all the datapoints by device\n// device:\"2530\",datapoint:{\"id\":\"2532\",\"type\":\"CONFIG_PENDING\",\"value\":\"false\",\"name\":\"HmIP-RF.0000DA498D5859:0.CONFIG_PENDING\"}\ndatapoints = flow.get(\"datapoints\");\n\ndatapoints.forEach(function(datapoint){\n    if (datapoint.datapoint.id == datapointid) {\n        msg.payload = datapoint.datapoint.value;\n        if (DEBUG) node.warn(\"Added: \" +  datapointid + \",value=\" + msg.payload);\n    }    \n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "7a2b6f7a.9ddf8"
            ]
        ]
    },
    {
        "id": "d0a8bff.d1d634",
        "type": "change",
        "z": "38ce1005.b1c85",
        "name": "Set Datapoint ID",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device.datapoint",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 220,
        "wires": [
            [
                "815e0dcd.277fc"
            ]
        ]
    },
    {
        "id": "fc4ed93a.e9c6d8",
        "type": "http request",
        "z": "38ce1005.b1c85",
        "name": "Send HTTP API Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 810,
        "y": 220,
        "wires": [
            [
                "941e9456.15d618"
            ]
        ]
    },
    {
        "id": "7a2b6f7a.9ddf8",
        "type": "function",
        "z": "38ce1005.b1c85",
        "name": "Set HTTP API Request",
        "func": "const temp = msg.payload;\nconst idx = flow.get(\"device\").idx;\n\n// Define the url to set the temperature of the Domoticz device\n// /json.htm?type=command&param=udevice&idx=IDX&nvalue=0&svalue=TEMP\n\nmsg.url = \"http://\" + flow.get(\"domip\") + \":8080/json.htm?type=command&param=udevice&idx=\" + idx + \"&nvalue=0&svalue=\" + temp;\n// msg.url = \"http://DOM-IP:8080/json.htm?type=command&param=udevice&idx=\" + idx + \"&nvalue=0&svalue=\" + temp;\nnode.warn(msg.url);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "fc4ed93a.e9c6d8"
            ]
        ]
    },
    {
        "id": "76672caa.32fff4",
        "type": "change",
        "z": "38ce1005.b1c85",
        "name": "Set Device",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "flow",
                "to": "{\"datapoint\":1567,\"idx\":113}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1b35048a.a235ab",
        "type": "change",
        "z": "38ce1005.b1c85",
        "name": "Set DOM IP",
        "rules": [
            {
                "t": "set",
                "p": "domip",
                "pt": "flow",
                "to": "DOM-IP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "76672caa.32fff4"
            ]
        ]
    }
]