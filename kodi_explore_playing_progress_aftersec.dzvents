--[[
-- kodi_explore_playing_progress_aftersec.dzvents
-- Get the current song playing and the progress percentage, time, totaltime from the Kodi Media Center and display in two text devices.
-- The data is refreshed every 10 seconds handled by afterSec method initiated by a switch device.
-- 20200523 rwbl
]]--

-- Define the url for the kodi jsonrpc get request (the parameter '?request=' is added)
local REQUEST_URL = "http://player-ip:8080/jsonrpc"
-- Event unique callbacks
local REQUEST_GETITEM_CALLBACK = "KODIEXPLOREPLAYINGPROGRESSGETITEM"
local REQUEST_GETPROPERTIES_CALLBACK = "KODIEXPLOREPLAYINGPROGRESSGETPROPERTIES"
-- Request for method Player.GetItem for artist:title
local JSONRPC_GETITEM = "{\"jsonrpc\":\"2.0\",\"method\":\"Player.GetItem\",\"params\":{\"properties\":[\"title\",\"album\",\"artist\",\"duration\"],\"playerid\":0},\"id\":\"AudioGetItem\"}"
-- Request for method Player.GetProperties for the total time and time played for the current song playing
local JSONRPC_GETPROPERTIES = '{\"jsonrpc\": \"2.0\", \"method\": \"Player.GetProperties\", \"params\" :{ \"playerid\": 0, \"properties\":[\"speed\", \"percentage\",\"time\", \"totaltime\"]},\"id\": \"AudioGetItem\"}'

-- Refresh Artist:Title & Progress Rate every NN seconds - afterSec(NN)
local REFRESHRATE = 10

-- Domoticz devices
local IDX_PLAYING = 117         -- Text song playing artist:title
local IDX_PROGRESS = 123        -- Text percentage, time, totaltime
local IDX_REMOTECONTROL = 126   -- Switch to enable or disable the player

local MSG_PLAYERTURNEDOFF = "Player turned Off"
local MSG_PLAYERTURNEDON = "Player turned On"
local MSG_INITPROGRESS = "0%"

-- clear the various device logs to limit database size with not needed entries
local function clearDeviceLogs(domoticz)
    local ip = "http://domoticz-ip:8080/json.htm"
	local urlBase = string.format('%s?type=command&param=clearlightlog&idx=', ip)
    devices = {IDX_PLAYING, IDX_PROGRESS}
    for key,idx in ipairs(devices) do
        domoticz.openURL({url = string.format('%s%d', urlBase, idx), method = 'GET'})
    end
    domoticz.log("Device logs cleared.")
end


return {
	on = { 
	    devices = { 
	        IDX_REMOTECONTROL                   -- turn the player on or off
	    }, 
	    httpResponses = { 
	        REQUEST_GETITEM_CALLBACK,           -- get artist:title
	        REQUEST_GETPROPERTIES_CALLBACK }    -- get percetage,time,totaltime 
	    },
    data = { 
        songprevious  = { initial = "" } 
        },
	execute = function(domoticz, item)
	    
	    -- Get the player remote control state
        playerRemoteControl = domoticz.devices(IDX_REMOTECONTROL).nValue

	    -- Check device
	    -- If ON run GETITEM request first time
	    if (item.isDevice and item.idx == IDX_REMOTECONTROL) then 
	        domoticz.log(string.format("%s=%s|%d|%s",item.name,item.state,item.nValue,item.sValue))
            -- reset songprevious
            domoticz.data.songprevious = ""
            -- Player remote control turned OFF
            if (playerRemoteControl == 0) then
                domoticz.devices(IDX_PLAYING).updateText(MSG_PLAYERTURNEDOFF)
                domoticz.devices(IDX_PROGRESS).updateText(MSG_INITPROGRESS)
                -- OPTION to clear the log of the various devices
                clearDeviceLogs(domoticz)                
            else
                -- Player remote control turned ON
                domoticz.devices(IDX_PLAYING).updateText(MSG_PLAYERTURNEDON)
                domoticz.devices(IDX_PROGRESS).updateText(MSG_INITPROGRESS)
    			domoticz.openURL({
	    		    url = string.format("%s?request=%s", REQUEST_URL, JSONRPC_GETITEM),
		    	    method = 'GET', 
			        callback = REQUEST_GETITEM_CALLBACK})
            end
		end 

		if (item.isHTTPResponse) then
            -- stop if playerRemoteControl is OFF
            if (playerRemoteControl == 0) then
                return
            end
            --
            domoticz.log(string.format('Callback: %s, Status Code = %s', item.callback, item.statusCode))
		    domoticz.log(string.format('Item data: %s', item.data))
			if (item.statusCode == 200) then
			    
			    if (item.callback == REQUEST_GETITEM_CALLBACK and item.isJSON) then
                    -- {"id":"AudioGetItem","jsonrpc":"2.0","result":{"item":{"album":"ALBUM","artist":["ARTIST"],"duration":254,"id":1531,"label":"LABEL","title":"TITLE","type":"song"}}} 
				    -- Pick the song artist & title 
				    local song = item.json.result.item
                    -- Check if there is a title
                    local songcurrent = "Nothing playing"
                    if (song.title ~= "") then
                        -- note the artist is the first entry (1) of the artist array
	        			songcurrent = string.format("%s:%s", song.artist[1], song.title)
                    end
                    domoticz.log(string.format("Song playing: %s", songcurrent))
                    -- check if the song has changed
                    if (songcurrent ~= domoticz.data.songprevious) then
                        domoticz.log(string.format("Song playing changed: %s to %s", domoticz.data.songprevious, songcurrent))
    			        -- Update the text device
	    			    domoticz.devices(IDX_PLAYING).updateText(songcurrent)
	    			    -- Update the data
	    			    domoticz.data.songprevious = songcurrent
                    end
        			domoticz.openURL({
	        		    url = string.format("%s?request=%s", REQUEST_URL, JSONRPC_GETPROPERTIES),
		        	    method = 'GET', 
			            callback = REQUEST_GETPROPERTIES_CALLBACK})
		        end
		        
			    if (item.callback == REQUEST_GETPROPERTIES_CALLBACK and item.isJSON) then
                    -- {"id":"AudioGetItem","jsonrpc":"2.0","result":{"percentage":25.5638370513916,"speed":1,"time":{"hours":0,"milliseconds":268,"minutes":1,"seconds":4},"totaltime":{"hours":0,"milliseconds":402,"minutes":4,"seconds":11}}}
				    -- init percentage with 0%
                    local progress = string.format("%s", "0%")
                    -- check seconds played
                    if (item.json.result.time.seconds > 0) then
                        -- set progress with percentage, time played and totaltime
    				    progress = string.format('%.1f%% / %02d:%02d:%02d / %02d:%02d:%02d',
        			        item.json.result.percentage,
        			        item.json.result.time.hours, item.json.result.time.minutes, item.json.result.time.seconds,
    	    		        item.json.result.totaltime.hours, item.json.result.totaltime.minutes,item. json.result.totaltime.seconds
    		    	        )
                    end
                    domoticz.devices(IDX_PROGRESS).updateText(progress)
                    -- Start next GETITEM request after NN seconds
        			domoticz.openURL({
	        		    url = string.format("%s?request=%s", REQUEST_URL, JSONRPC_GETITEM),
		        	    method = 'GET', 
			            callback = REQUEST_GETITEM_CALLBACK}).afterSec(REFRESHRATE)
                end
			else
                domoticz.devices(IDX_PLAYING).updateText(item.statusText)
			    domoticz.log(string.format("[ERROR] Handling request: %s", item.statusText), domoticz.LOG_ERROR)
		        return
			end
		end

    end
}
